name: Platform build and push
description: Build and push a container using the Freckle Platform CLI
inputs:
  platform-setup-version:
    description: Version of Platform CLI to install
    required: true
    default: ""
  platform-setup-token:
    description: GitHub token with access to freckle/platform artifacts
    required: true
  app-directory:
    description: Directory containing the App's .platform
    required: true
    default: "."
  app-resource:
    description: --resource option
    required: true
    default: ""
outputs: {}
runs:
  using: composite
  steps:
    - uses: freckle/setup-platform-action@v6
      with:
        version: ${{ inputs.platform-setup-version }}
        token: ${{ inputs.platform-setup-token }}

    - id: prep
      shell: bash
      run: |
        cd '${{ inputs.app-directory }}'

        # Set each setting as an output of the same name
        for name in Dockerfile DockerBuildContext EcrRepository; do
          printf "$name="

          if [[ -n '${{ inputs.app-resource }}' ]]; then
            platform --resource '${{ inputs.app-resource }}' query "settings.$name"
          else
            platform query "settings.$name"
          fi
        done >>"$GITHUB_OUTPUT"

    - id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ steps.prep.outputs.EcrRepository }}
        tags: |
          type=sha,prefix=,format=long,priority=1000
          type=edge,branch=main

    - uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-${{ steps.prep.outputs.DockerBuildContext }}-image-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-${{ steps.prep.outputs.DockerBuildContext }}-image-

    - id: buildx
      uses: docker/setup-buildx-action@v1

    - shell: bash
      run: platform container:login

    - uses: docker/build-push-action@v3
      with:
        builder: ${{ steps.buildx.outputs.name }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
        context: ${{ inputs.app-directory}}/${{ steps.prep.outputs.DockerBuildContext }}
        file: ${{ steps.prep.outputs.Dockerfile }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        push: true

    # Only cache this build's output; don't retain from every build before
    - shell: bash
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
